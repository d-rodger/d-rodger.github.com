<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>DevSlant</title><link href="http://devslant.com/" rel="alternate"></link><link href="http://devslant.com/feeds/programming.atom.xml" rel="self"></link><id>http://devslant.com/</id><updated>2013-03-11T15:55:00-07:00</updated><entry><title>"A side of Scala"</title><link href="http://devslant.com/a-side-of-scala.html" rel="alternate"></link><updated>2013-03-11T15:55:00-07:00</updated><author><name>Derek Rodger</name></author><id>tag:devslant.com,2013-03-11:a-side-of-scala.html</id><summary type="html">&lt;p&gt;&lt;img align="top" alt="Scala Logo" src=https://dl.dropbox.com/u/7133191/scalaLogo.png&gt;&lt;/p&gt;

&lt;p&gt;
    I've been investing time in a few different technologies and programming languages lately. One of the languages that has surprised me is Scala. I'd heard about it, even took a peek at it many years ago, and promptly went on to other things. However, after meeting with Jeremy Pierre &lt;a href="http://noisycode.com" title="NoiseCode" target="_blank"&gt;(noisycode.com/)&lt;/a&gt; from HootSuite, I decided to take another look at it. 
&lt;/p&gt;

&lt;p&gt;
    Scala has come a long way, and it seems to be poised for some real growth. I began with the usual, a quick google, wandering through some scala dedicated sites, StackOverflow and Reddit posts. I came across a course on &lt;a href="https://www.coursera.org/course/progfun" title="Coursera" target="_blank"&gt;Coursera&lt;/a&gt; (already signed up), and have begun reading Cay Horstmann's Scala for the Impatient.
&lt;/p&gt;

&lt;p&gt;
    Scala makes you wish this is what Java had turned into. Scala runs on top of the JVM, so it's doing what the JVM + Java would be capable of, if only Java had gone towards this path.
&lt;/p&gt;

&lt;p&gt;
    I think what has surprised me most about Scala so far, are the parts that seem like Perl to me. I know, shocking right? Scala similar to Perl? Scala has much higher information density that Java - you get more done per line of code. I always found Perl to have a high information density too. Quite often, Scala will infer what 'type' you want. You can declare values as lazy (which is one of the features the Perl Moose framework provides)
&lt;/p&gt;

&lt;p&gt;
    I've only just begun with Scala, and my views may very well change as I learn more about it. For now, it seems like an interesting (but growing) niche. There is a Vancouver meetup group - &lt;a href="http://www.meetup.com/vancouver-scala/" title="scala" target="_blank"&gt;Vancouver Scala&lt;/a&gt;. Hopefully there will be some meetups and presentations there soon.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="scala"></category><category term="perl"></category></entry><entry><title>"Introducing Cassandra"</title><link href="http://devslant.com/introducing-cassandra.html" rel="alternate"></link><updated>2012-06-08T22:25:00-07:00</updated><author><name>Derek Rodger</name></author><id>tag:devslant.com,2012-06-08:introducing-cassandra.html</id><summary type="html">&lt;p&gt;&lt;img align="left" alt="Cassandra Logo" height="131" src="http://dl.dropbox.com/u/7133191/cassandra200.jpg-323ea7227766a48a.jpeg" width="200"/&gt;&lt;/p&gt;

&lt;p&gt;Lately I&amp;#8217;ve been trying out &lt;a href="http://cassandra.apache.org/" 
title="Cassandra" target="_blank"&gt;Cassandra&lt;/a&gt; @ work. Just recently I took a 
webinar that &lt;a href="http://www.datastax.com/" title="DataStax" 
target="_blank"&gt;DataStax&lt;/a&gt; hosted (the commercial company behind Cassandra), 
and conducted by Tim Berglund (&lt;a href="https://twitter.com/#!/tlberglund" 
title="twitter" target="_blank"&gt;@tlberglund&lt;/a&gt;). The webinars introduce 
Cassandra for developers and operations. A great way to get started 
understanding what Cassandra does, and doesn&amp;#8217;t do. (Tim&amp;#8217;s 
training videos on O&amp;#8217;Reilly are excellent by the way).&lt;/p&gt;

&lt;p&gt;Cassandra is a schema-less, scalable, distributed database. There&amp;#8217;s
actually more to it than that, but the list of it&amp;#8217;s capabilities is rather
long :-). Surprisingly, it&amp;#8217;s also relatively easy to setup. I found the
setup process simpler than earilier versions of MySQL, yet you get far more from
a brief configuration.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Single node setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Setting up a single node of Cassandra is straight forward, but it is handy to
have some notes in one place, since there may be some additional files you need
to download if you want some of the features provided by the &lt;a
href="http://www.datastax.com/products/opscenter" title="OpsCenter"
target="_blank"&gt;OpsCenter&lt;/a&gt; package that DataStax makes available for
monitoring your Cassandra cluster. More about that later.&lt;/p&gt;

&lt;p&gt;First, decide if you want the Apache version (no OpsCenter available with
this version) or the DataStax Community version. &lt;/p&gt;

&lt;p&gt;Cassandra runs on the JVM, so make sure you have a version of the Java
runtime environment. I&amp;#8217;ve tested with both Oracle Java 6 &amp;amp; 7. The
OpenJDK is &lt;strong&gt;not&lt;/strong&gt; recommended. One caveat about Java 7 below.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll be using the DataStax Community edition, which at this time is
v1.1.0.&lt;/p&gt;

&lt;p&gt;Once you&amp;#8217;ve downloaded the version for your OS, go ahead and install
it. I&amp;#8217;m using the tarball: dsc-cassandra-1.1.0-bin.tar.gz &lt;/p&gt;

&lt;p&gt;&lt;span&gt;Configuration&lt;/span&gt;&lt;br/&gt;Edit your &lt;strong&gt;conf/cassandra.yaml&lt;/strong&gt;
file.&lt;br/&gt;&lt;br/&gt;&lt;strong&gt;initial_token&lt;/strong&gt;&lt;br/&gt;You can set this to 0 for a
single node, but read the notes below if you setup a cluster. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;directories&lt;/strong&gt;&lt;br/&gt;Decide where you want your data files,
commit log, and cache to be saved to. Needs to be a path you have permissions to
read/write. &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;seeds, listen_address, rpc_address&lt;/strong&gt;&lt;br/&gt;You can leave these
as the defaults, but you&amp;#8217;ll want to change these for cluster
configurations.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java 7&lt;/strong&gt;&lt;br/&gt;Depending on the version of Cassandra you are
running with Java 7, the initial amount of memory set for the stack space
appears to be too small. (it works fine with v1.1.0). However, if you run into
an error from the JVM about memory, change the following line in
&lt;strong&gt;conf/cassandra-env.sh&lt;/strong&gt; (near line
153):&lt;br/&gt;&lt;em&gt;JVM_OPTS=&amp;#8221;$JVM_OPTS -Xss128k&amp;#8221;&lt;/em&gt; &lt;br/&gt;and change it
to&lt;br/&gt;&lt;em&gt;JVM_OPTS=&amp;#8221;$JVM_OPTS -Xss160k&amp;#8221; &lt;br/&gt;&lt;/em&gt;&lt;br/&gt;At this
point, you can go ahead and try running Cassandra:&lt;br/&gt;&lt;strong&gt;bin/cassandra
-f&lt;/strong&gt; &lt;br/&gt;&lt;br/&gt;This will run it in the foreground, allowing you to see
any errors. &lt;br/&gt;If you scroll through the output, you will see two items not
available:&lt;br/&gt;&amp;#8230;&lt;br/&gt;JNA not found. Native methods will be
disabled.&lt;br/&gt;&amp;#8230;&lt;br/&gt;Will not load MX4J, mx4j-tools.jar is not in the
classpath &lt;/p&gt;

&lt;p&gt;These features (JNA and mx4j) can be downloaded and installed to the
cassandra/lib path by getting them from:&lt;br/&gt;&lt;a
href="http://sourceforge.net/projects/mx4j/files/" target="_blank"&gt;&lt;a
href="http://sourceforge.net/projects/mx4j/files/"
target="_blank"&gt;http://sourceforge.net/projects/mx4j/files/&lt;/a&gt;&lt;br/&gt;&lt;/a&gt;&lt;a
href="https://github.com/twall/jna" target="_blank"&gt;&lt;a
href="https://github.com/twall/jna"
target="_blank"&gt;https://github.com/twall/jna&lt;/a&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;You need the mx4j-tools.jar from the mx4j project.&lt;br/&gt;You need the jna.jar
and platform.jar for JNA support.&lt;br/&gt;Once you have the jar files copied, stop
and then restart Cassandra.&lt;/p&gt;

&lt;p&gt;Assuming no errors, at this point you have a working Cassandra node. You can
go ahead and create a keyspace (database), and column families (tables).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Cluster setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This is mostly a repeat of the single node setup. Install and configure
Cassandra on your other nodes, but this time you will be filling in the config
section for &amp;#8216;seeds&amp;#8217; by adding a few of the IPs from the other nodes.
This allows the nodes to start talking to each other, and learn the topology of
the network. You don&amp;#8217;t need to include all the other nodes, just enough
for the cluster to start talking to itself.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;initial_token&lt;/strong&gt;&lt;br/&gt;You really want to set the inital_token
for &lt;em&gt;each&lt;/em&gt; node you are installing to. As noted in the conf file, poorly
chosen tokens will lead to hotspots for your data. There is a site available for
generating tokens depending on the number of nodes you have &lt;a
href="http://rickbranson.com/tokenguy.html" title="Token Guy"
target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;seeds&lt;/strong&gt;&lt;br/&gt;As mentioned above, you will want to add some of
the IP addresses of the other nodes (even if those nodes are simply running in a
virtual machine). Modify this line, and make sure the list of IPs is within the
quotes:&lt;br/&gt;seeds: &amp;#8220;192.168.10.100, 192.168.10.101,
192.168.10.103&amp;#8221;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;listen_address:&lt;/strong&gt;&lt;br/&gt;Set this to the local host IP address
(the address that you will be configuring some of the other nodes to talk
to).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rpc_address:&lt;/strong&gt;&lt;br/&gt;I set this to the same IP as I&amp;#8217;m
using for the listen_address - the local host IP. &lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;strong&gt;Ready&lt;/strong&gt;&lt;br/&gt;At this point, the node is ready to become
part of a cluster. You will need to perform all of the single node and cluster
setup as described above on each node that you want as part of the cluster. Go
ahead and start up your Cassandra instances.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpsCenter&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Take a look at this:&lt;img alt="opscenter" height="468"
src="http://www.datastax.com/wp-content/uploads/2012/04/opsc-multi-cluster.jpg"
width="900"/&gt;&lt;/p&gt;

&lt;p&gt;Download the &lt;a href="http://www.datastax.com/products/opscenter"
title="OpsCenter" target="_blank"&gt;OpsCenter&lt;/a&gt;. This is pretty cool. The
OpsCenter is your dashboard, allowing you to setup, modify, observe and maintain
your Cassandra cluster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpsCenter setup&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are two parts to the OpsCenter, as far as configuration goes:&lt;br/&gt;The
OpsCenter itself&lt;br/&gt;The agent that sends data to the OpsCenter&lt;br/&gt;&lt;br/&gt;You
only need the OpsCenter running on one server, but you need the agent running on
each node, so that it can feed information to the OpsCenter.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;conf/opscenterd.conf&lt;/strong&gt;&lt;br/&gt;Set the &lt;em&gt;interface&lt;/em&gt; value to
your local host IP&lt;/p&gt;

&lt;p&gt;I also turned off ssl, since I&amp;#8217;m just setting this up as a test cluster
using several virtual machines, by adding this under [agents]:&lt;/p&gt;

&lt;p&gt;[agents]&lt;br/&gt;use_ssl = false &lt;/p&gt;

&lt;p&gt;&lt;strong&gt;agent/conf/address.yaml&lt;/strong&gt;&lt;br/&gt;You can create this by running
the bin/setup program, but for a simple entry, you can just create it yourself.
One difference here, will be the &amp;#8216;stomp_interface&amp;#8217; - this is the IP
address of the server where you want to run the OpsCenter. The agents on all
nodes should be using the same OpsCenter IP address to talk to. Also note that
here also, I&amp;#8217;ve turned off ssl.&lt;/p&gt;

&lt;p&gt;stomp_interface: &amp;#8220;192.168.10.100&amp;#8221;&lt;br/&gt;use_ssl: 0&lt;/p&gt;

&lt;p&gt;You will need to setup the agent configuration on each node.&lt;/p&gt;

&lt;p&gt;Then run the agent:&lt;br/&gt;&lt;strong&gt;agent/bin/opscenter-agent -f&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To turn on the OpsCenter:&lt;br/&gt;&lt;strong&gt;bin/opscenter -f&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Then use your browser to connect to the IP address that you configured
OpsCenter to use, via port 8888.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;If all has gone well, at this point you have Cassandra and OpsCenter up
and running, and you can see your cluster. Time to start creating keyspaces
(databases) and column families (tables). Then look into CQL :-).&lt;/p&gt;

&lt;p&gt;I also recommend the #cassandra channel on freenode for questions, and the
documentation on the DataStax site is extensive.&lt;/p&gt;

&lt;p&gt;Hope this helps.&lt;/p&gt;</summary><category term="cassandra"></category><category term="datastax"></category><category term="nosql"></category><category term="opscenter"></category><category term="Tim Berglund"></category></entry><entry><title>"Catching up with the future"</title><link href="http://devslant.com/catching-up-with-the-future.html" rel="alternate"></link><updated>2012-05-17T16:26:00-07:00</updated><author><name>Derek Rodger</name></author><id>tag:devslant.com,2012-05-17:catching-up-with-the-future.html</id><summary type="html">&lt;p&gt;One of the things that started happening @work in the last year is that more
developers within the company began looking to use a wider (and more recent)
selection of technology. @work has been running for years on a LAMP (Linux, 
Apache 1.3x, MySQL, Perl) stack.&lt;/p&gt;

&lt;p&gt;With a move to JavaScript, HTML5, and CSS3 for front-end development, and
node.js for some of the back-end infrastructure, there have been opportunities
to try new languages, databases, caches, etc.&lt;/p&gt;

&lt;p&gt;Like any group of people picking new technology, sometimes you pick wisely. 
Other times…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;When you don’t know what your choice means&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="MongoDB" height="100" width="225" src="http://media.mongodb.org/logo-mongodb.png"/&gt;&lt;/p&gt;

&lt;p&gt;About 8 months ago, one project team was facing a high volume of reads 
(and a fairly high volume of writes). They decided to try using MongoDB for 
storing their data. They went through some rough outages, but managed to 
persevere and got it working (and it still works). However, sometimes success 
makes everything look like it can be solved the same way.&lt;/p&gt;

&lt;p&gt;There were some features that were meant only for paying users. This is where things quickly got painful.&lt;/p&gt;

&lt;p&gt;They used MongoDB to also store whether or not the user had paid, and should therefore be granted access to additional content and features. There was already a billing system that stored this information, but they wanted to cache the billing access in MongoDB. Some of you will already be thinking of the ways this can go wrong, but for now I’m not going to focus on the risks of having data and responsibilities being duplicated across different platforms. Instead I’ll focus on the disadvantage of using MongoDB for this.&lt;/p&gt;

&lt;p&gt;In this particular use case, with MongoDB’s eventual consistency, users could have successfully paid, but depending on which MongoDB node the requests came to immediately after purchasing, the node may or may not have the updated data.&lt;/p&gt;

&lt;p&gt;MongoDB isn’t where you want to store this kind of information. You need your view of billing data to be consistent 100% of the time. Imagine if you 
occasionally lost access to your TV channels because the system storing your
billing state wasn’t consistent.&lt;/p&gt;

&lt;p&gt;People don’t like it when you mess up the access they have paid for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Speed and consistency&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Redis" height="100" width="200" src="http://redis.io/images/redis.png"/&gt;&lt;/p&gt;

&lt;p&gt;
Since it was now impacting users for something they had paid for, I became involved from the billing side of @work. Myself and another developer (from the Integrations team) volunteered to take care of it. We were faced with a few problems:
&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;The technical - data needed to be accessed frequently (about 4,000 - 5,000 queries per second with higher volumes expected), and had to be consistent each time.&lt;/li&gt;

    &lt;li&gt;There was no documentation on what had been done or how the product was supposed to work. Argh.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Fortunately, the actual amount of data to store was small, and could easily fit into memory. This is where we could have used memcache. We already had memcache in use in other areas of the company infrastructure, so it would be easy to spin up another instance.
&lt;/p&gt;

&lt;p&gt;
After a bit of research though, we decided to use Redis. Aside from being ridiculously fast (testing showed it capable of 100,000 queries per second on our servers), it supports storing data structures such as hashes, sets, sorted sets, and lists.
&lt;/p&gt;

&lt;p&gt;
Additionally, Redis was easy to work with. Compared to the rest of the code we needed to change, suddenly the data store and it’s performance was no longer a concern. Redis just worked.
&lt;/p&gt;

&lt;p&gt;
Since moving the data over to Redis and ensuring that the billing system was responsible for updating it, I can say that Redis has been completely solid for us. Billions and billions of hits, no downtime, reasonably easy to slave and support for fail-over with persistence to disk. Our customers now have a correct, and consistent experience when using the product.
&lt;/p&gt;

&lt;p&gt;
Some technology can really help you across a range of problem domains (I’ll blog about Cassandra for that in the future). But you should always be thinking (and testing!) about your choices, lest you end up using a shiny new hammer to solve problems that need a powerdrill.
&lt;/p&gt;</summary><category term="redis"></category><category term="mongodb"></category><category term="airG"></category></entry><entry><title>"Android Emulator 2.2 and Android Market"</title><link href="http://devslant.com/android-emulator-22-and-android-market.html" rel="alternate"></link><updated>2010-11-02T17:20:00-07:00</updated><author><name>Derek Rodger</name></author><id>tag:devslant.com,2010-11-02:android-emulator-22-and-android-market.html</id><summary type="html">&lt;p&gt;
One of the drawbacks to not having an actual Android phone (for now) is that I want to see what apps are available, but Google only has a sampling of what’s available on their &lt;a href="http://www.android.com/market/" title="Android Market" target="_blank"&gt;web site&lt;/a&gt;. I find that rather annoying.
&lt;/p&gt;

&lt;p&gt;
Of course, I do have the emulator, and in theory I should be able to do something with that. The emulator does not come with Market access, but there are system images of the virtual devices for v1.5 and 1.6.
&lt;/p&gt;

&lt;p&gt;
I have the v1.5, and it’s ok, but I wanted to see what was available for v2.2, which now has &lt;a href="http://developer.android.com/resources/dashboard/platform-versions.html" title="android versions" target="_blank"&gt;36% of all Android&lt;/a&gt; users on it.
&lt;/p&gt;

&lt;p&gt;
I ended up using a ROM image from &lt;a href="http://android.modaco.com/content/google-nexus-one-nexusone-modaco-com/317849/22-oct-r24-modaco-custom-rom-desire-port-for-nexus-one-with-online-kitchen-2-2-froyo/" title="Modaco" target="_blank"&gt;modaco&lt;/a&gt; for the nexus one (note: link may require registration).
&lt;/p&gt;

&lt;p&gt;
So here’s how it all comes together (note, I am using Windows below, but it’s nearly identical under Mac or Linux):
&lt;/p&gt;

&lt;ol&gt;
    &lt;li&gt;Create an Android 2.2 AVD&lt;/li&gt;
    &lt;li&gt;&lt;p&gt;Copy the system.img that comes with the Android SDK to your new AVD folder. ex:&lt;/p&gt;
&lt;pre&gt;
D:\android-sdk-windows\platforms\android-8\images\system.img
to
C:\Users\drodger\.android\avd\AndMarket22.avd\
&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;p&gt;Now you’ll need to start the emulator, but you need to tell it how much internal storage to use (the default isn’t enough). In the AVD manager, select the New… button by the Hardware section, and scroll down and select the Device ram size property, and then edit the value to 128 (just click on the value). Here’s the command line version:&lt;/p&gt;
    &lt;pre&gt;D:\android-sdk-windows\tools\emulator -avd AndMarket22.avd -partition-size 128&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;Wait. Wait some more. The emulator is slow to load this one up sometimes. Don’t bother with the next step until the emulator has completely started.&lt;/li&gt;
    &lt;li&gt;Now you need to get the build.prop file from within the emulator image, and make a change, and push the change back, like so:
    &lt;pre&gt;D:\android-sdk-windows\tools\adb pull /system/build.prop&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;Now edit that file (it will now be in your tools\ directory), and comment out the following line by putting a '#' at the beginning of the line:
&lt;pre&gt;
ro.config.nocheckin=yes
#ro.config.nocheckin=yes
&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;Now you need to push it back:&lt;pre&gt;D:\android-sdk-windows\tools\adb remount&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;D:\android-sdk-windows\tools\adb push build.prop /system/build.prop&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;Now you need the ROM you downloaded from modaco&lt;/li&gt;
    &lt;li&gt;Look within the zip, in the \system\app folder&lt;/li&gt;
    &lt;li&gt;Copy GoogleServicesFramework.apk and Vending.apk to your tools\ directory.&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;D:\android-sdk-windows\tools\adb push GoogleServicesFramework.apk /system/app&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;D:\android-sdk-windows\tools\adb push Vending.apk /system.app&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;Remove the SDK setup package:&lt;/li&gt;
    &lt;li&gt;&lt;pre&gt;D:\android-sdk-windows\tools\adb shell rm /system/app/SdkSetup.apk&lt;/pre&gt;&lt;/li&gt;
    &lt;li&gt;Close the emulator&lt;/li&gt;
    &lt;li&gt;Delete these files in your AVD directory: cache.img, userdata.img, userdata-qemu.img&lt;/li&gt;
    &lt;li&gt;Ok, now go start the emulator again, and you should be good to go!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt="emulator" src="http://dl.dropbox.com/u/7133191/Capture.jpg"/&gt;&lt;/p&gt;</summary><category term="android"></category><category term="google"></category><category term="emulator"></category><category term="market"></category></entry></feed>